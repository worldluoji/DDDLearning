1. 领域：DDD的领域就是边界内要解决的业务问题域。
2. 子域：领域可以划分为子域，每一个子域对应一个更小的业务范围。子域可以进一步划分未子子域。
3. 核心域、通用域、支撑域： 核心域就是核心业务所对应的领域；通用域没有什么个性化的业务特点，但是提供通用的功能供多个子域使用；支撑域则不具备通用性，针对于特定的业务场景。

4. 限界上下文：领域边界就是通过限界上下文来界定的。限界，就是领域的边界，而上下文则是语义环境。
5. 实体和值对象。实体就是一个类，DDD中一般使用充血模型；值对象就是实体中引用的对象。

6. 聚合：聚合就是由业务和逻辑紧密关联的实体和值对象组合而成。聚合时数据修改和持久化的基本单元，每一个聚合对应一个仓库，实现数据的持久化。聚合与聚合之间也有一个边界。
7.聚合根：但如果把聚合比作组织，那么聚合根就是组织的负责人，聚合根也叫根实体，它不仅是实体，还是聚合的管理者。同时聚合根也是聚合之间，对外的接口人。
DDD中，以聚合根ID关联的方式接受外部任务和请求，在上下文内实现聚合之间的业务协同。也就是说，一个聚合要访问另一个聚合内的实体，必须通过聚合根。
聚合根实际上也是一个实体对象。
一般来说，一次事务只能改一个聚合的状态。 
如果需要改变多个聚合的状态，就需要引入事件总线。

8. 领域事件
就是某个动作完成后触发的事件。
比如密码输错三次，锁定30分钟不能登录。
领域事件分为微服务内的领域事件，和微服务间的领域事件。
微服务内的领域事件发生在服务的聚合之间，发布方将事件发布到事件总线，订阅方从总线中读取进行后续处理。比如spring中的监听机制，就可以实现这一操作。
微服务间的领域事件，则需要通过消息中间件（比如MQ、Kafka）进行解耦。比如在保险的投保服务创建了缴费通知单，这时候就发布该事件到Kafka，订阅这个事件的收款服务就进行缴费等操作。
参考图片"领域事件案例.jpg"
领域事件一般需要做持久化，比如在发布事件到Kafka之前持久化数据，订阅方在处理时也持久化一次事件数据，这样方便以后“对账”。这样，即使消息中间件出了问题，后面也能人工介入进行处理。