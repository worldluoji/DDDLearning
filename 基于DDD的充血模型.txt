先看业务逻辑，如果比较简单，直接使用常用的三层贫血模型即可，即Controller、 Service、 Repository三层，即Controller中处理路由请求，Servcie里处理业务逻辑，Repository里处理与数据层的交互。
如果业务逻辑比较复杂，采用基于DDD的充血模型更好，层次更加分明，后期维护、扩展也更容易
一般来说，充血模型分为用户接口层（相当于Controller）、Applicatoin层（主要用于负责微服务调用的编排以及结果的组合等）、Domain层（这里放充血模型，即一个实体类，里面包含了各种业务逻辑操作）和基础层（常用的工具，以及和数据库的交互等，比如Mybatis中的各个mapper）
由于一次业务逻辑可能需要多个Domain对象进行处理，这时候，又会抽象出一个Servcie层，当需要多个Domain对象进行处理时，就在Sercive中进行处理。
在用户接口层或者Servie层，将请求的DTO转化为Domain对象（DO），由于业务逻辑在Domain中实现，所以Domain里其实包含贫血模型中的Repository。

总结：写代码一定要有分层的思想在里面，方便以后维护、扩展。 比如，当你发现一个聚合越来越大的时候，使用基于DDD充血模型就可以直接把这个聚合拎出去创建一个新的服务，不需要做太大的改动。